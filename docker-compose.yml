version: "3.8"

x-kafka-common: &kafka-common
  image: "bitnami/kafka:latest"
  ports:
    - "9092"
  networks:
    - kafka
  healthcheck:
    test: 'bash -c ''printf "" > /dev/tcp/127.0.0.1/9092; exit $$?;'''
    interval: 5s
    timeout: 10s
    retries: 3
    start_period: 30s
  restart: unless-stopped

x-kafka-source-env-common: &kafka-source-env-common
  KAFKA_CFG_MODE: kraft
  KAFKA_CFG_PROCESS_ROLES: controller,broker
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,SSL:SSL
  KAFKA_CFG_LISTENERS: SSL://:9092,CONTROLLER://:9093
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: SSL

  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-source-0:9093,1@kafka-source-1:9093
  KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
  KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
  KAFKA_CFG_SSL_CLIENT_AUTH: "required"
  KAFKA_CFG_SSL_KEYSTORE_FILENAME: /bitnami/kafka/config/certs/kafka.keystore.jks
  KAFKA_CFG_SSL_TRUSTSTORE_FILENAME: /bitnami/kafka/config/certs/kafka.truststore.jks
  KAFKA_CFG_SSL_KEYSTORE_PASSWORD: "test1234"
  KAFKA_CFG_SSL_KEY_PASSWORD: "test1234"
  KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: "test1234"
  KAFKA_LOG4J_LOGGERS: "org.apache.kafka.metadata.authorizer=DEBUG,org.apache.kafka.server.authorizer=DEBUG"

  KAFKA_CFG_EARLY_START_LISTENERS: CONTROLLER
  KAFKA_CFG_AUTHORIZER_CLASS_NAME: org.apache.kafka.metadata.authorizer.StandardAuthorizer
  KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND: true
  KAFKA_CFG_SUPER_USERS: "User:kafka-source-0;User:kafka-source-1;User:kafka-target-0;User:kafka-target-1;User:kafka;User:kafka-connect;User:kafka-ui;User:schema-registry;User:shop-api"
  KAFKA_CFG_SSL_PRINCIPAL_MAPPING_RULES: "RULE:^CN=([^.]+).*/$1/L,DEFAULT"
  KAFKA_CFG_CONTROLLER_SSL_PRINCIPAL_MAPPING_RULES: "DEFAULT"
  KAFKA_CFG_CONTROLLER_AUTHORIZER_ACL: "User:*"

x-kafka-target-env-common: &kafka-target-env-common
  KAFKA_CFG_MODE: kraft
  KAFKA_CFG_PROCESS_ROLES: controller,broker
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,SSL:SSL
  KAFKA_CFG_LISTENERS: SSL://:9092,CONTROLLER://:9093
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: SSL

  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-target-0:9093,1@kafka-target-1:9093
  KAFKA_KRAFT_CLUSTER_ID: abcdef123jklmnopqrstuv
  KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
  KAFKA_CFG_SSL_CLIENT_AUTH: "required"
  KAFKA_CFG_SSL_KEYSTORE_FILENAME: /bitnami/kafka/config/certs/kafka.keystore.jks
  KAFKA_CFG_SSL_TRUSTSTORE_FILENAME: /bitnami/kafka/config/certs/kafka.truststore.jks
  KAFKA_CFG_SSL_KEYSTORE_PASSWORD: "test1234"
  KAFKA_CFG_SSL_KEY_PASSWORD: "test1234"
  KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: "test1234"
  KAFKA_LOG4J_LOGGERS: "org.apache.kafka.metadata.authorizer=DEBUG,org.apache.kafka.server.authorizer=DEBUG"

  KAFKA_CFG_EARLY_START_LISTENERS: CONTROLLER
  KAFKA_CFG_AUTHORIZER_CLASS_NAME: org.apache.kafka.metadata.authorizer.StandardAuthorizer
  KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND: true
  KAFKA_CFG_SUPER_USERS: "User:kafka-source-0;User:kafka-source-1;User:kafka-target-0;User:kafka-target-1;User:kafka;User:kafka-connect;User:kafka-ui;User:schema-registry"
  KAFKA_CFG_SSL_PRINCIPAL_MAPPING_RULES: "RULE:^CN=([^.]+).*/$1/L,DEFAULT"
  KAFKA_CFG_CONTROLLER_SSL_PRINCIPAL_MAPPING_RULES: "DEFAULT"
  KAFKA_CFG_CONTROLLER_AUTHORIZER_ACL: "User:*"

x-kafka-connect-env-common: &kafka-connect-env-common
  KAFKA_HEAP_OPTS: "-Xmx2G -Xms1G"

x-kafka-connect-common: &kafka-connect-common
  container_name: x-kafka-connect-common
  image: "bitnami/kafka:latest"
  networks:
    - kafka
  volumes:
    - ./jmx-exporter:/opt/jmx-exporter
    - ./kafka-connect/connect-distributed.properties:/opt/bitnami/kafka/config/connect-distributed.properties
    - ./secrets/kafka-connect/kafka.kafka-connect.keystore.jks:/opt/bitnami/kafka/config/certs/kafka.keystore.jks:ro
    - ./secrets/kafka-connect/kafka.kafka-connect.truststore.jks:/opt/bitnami/kafka/config/certs/kafka.truststore.jks:ro
  depends_on:
    kafka-target-0:
      condition: service_healthy
    kafka-target-1:
      condition: service_healthy
  command: /opt/bitnami/kafka/bin/connect-distributed.sh /opt/bitnami/kafka/config/connect-distributed.properties
  healthcheck:
    test: 'bash -c ''printf "" > /dev/tcp/127.0.0.1/8083; exit $$?;'''
    interval: 5s
    timeout: 10s
    retries: 3
    start_period: 30s
  restart: unless-stopped
  environment:
    <<: *kafka-connect-env-common

services:
  kafka-source-0:
    <<: *kafka-common
    container_name: kafka-source-0
    hostname: kafka-source-0
    environment:
      <<: *kafka-source-env-common
      KAFKA_CFG_NODE_ID: 0
    volumes:
      - kafka_0_data:/bitnami/kafka
      - ./jmx-exporter:/opt/jmx-exporter
      - ./config/client-ssl.properties:/bitnami/kafka/config/client-ssl.properties:ro
      - ./secrets/kafka-source-0/kafka.kafka-source-0.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks:ro
      - ./secrets/kafka-source-0/kafka.kafka-source-0.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks:ro

  kafka-source-1:
    <<: *kafka-common
    container_name: kafka-source-1
    hostname: kafka-source-1
    environment:
      <<: *kafka-source-env-common
      KAFKA_CFG_NODE_ID: 1
    volumes:
      - kafka_1_data:/bitnami/kafka
      - ./jmx-exporter:/opt/jmx-exporter
      - ./config/client-ssl.properties:/bitnami/kafka/config/client-ssl.properties:ro
      - ./secrets/kafka-source-1/kafka.kafka-source-1.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks:ro
      - ./secrets/kafka-source-1/kafka.kafka-source-1.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks:ro

  kafka-target-0:
    <<: *kafka-common
    container_name: kafka-target-0
    hostname: kafka-target-0
    environment:
      <<: *kafka-target-env-common
      KAFKA_CFG_NODE_ID: 0
    volumes:
      - kafka_2_data:/bitnami/kafka
      - ./jmx-exporter:/opt/jmx-exporter
      - ./config/client-ssl.properties:/bitnami/kafka/config/client-ssl.properties
      - ./secrets/kafka-target-0/kafka.kafka-target-0.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks:ro
      - ./secrets/kafka-target-0/kafka.kafka-target-0.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks:ro

  kafka-target-1:
    <<: *kafka-common
    container_name: kafka-target-1
    hostname: kafka-target-1
    environment:
      <<: *kafka-target-env-common
      KAFKA_CFG_NODE_ID: 1
    volumes:
      - kafka_3_data:/bitnami/kafka
      - ./jmx-exporter:/opt/jmx-exporter
      - ./config/client-ssl.properties:/bitnami/kafka/config/client-ssl.properties
      - ./secrets/kafka-target-1/kafka.kafka-target-1.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks:ro
      - ./secrets/kafka-target-1/kafka.kafka-target-1.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks:ro

  kafka-ui:
    container_name: kafka-ui
    hostname: kafka-ui
    image: provectuslabs/kafka-ui:latest
    volumes:
      - ./kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
      - ./secrets/kafka-ui/kafka.kafka-ui.keystore.jks:/etc/kafkaui/ssl/kafka-ui-keystore.jks:ro
      - ./secrets/kafka-ui/kafka.kafka-ui.truststore.jks:/etc/kafkaui/ssl/kafka.truststore.jks:ro
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      kafka-source-0:
        condition: service_healthy
      kafka-source-1:
        condition: service_healthy
      kafka-target-0:
        condition: service_healthy
      kafka-target-1:
        condition: service_healthy
    networks:
      - kafka
    ports:
      - "8080:8080"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8080 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - kafka
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:9090 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    hostname: alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    networks:
      - kafka
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:9093 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  kafka-exporter:
    container_name: kafka-exporter
    hostname: kafka-exporter
    image: docker.io/bitnami/kafka-exporter:latest
    depends_on:
      kafka-source-0:
        condition: service_healthy
      kafka-source-1:
        condition: service_healthy
      kafka-target-0:
        condition: service_healthy
      kafka-target-1:
        condition: service_healthy
    ports:
      - "9308:9308"
    networks:
      - kafka
    command:
      - --kafka.server=kafka-source-0:9092
      - --kafka.server=kafka-source-1:9092
      - --kafka.server=kafka-target-0:9092
      - --kafka.server=kafka-target-1:9092
      - --tls.enabled
      - --tls.ca-file=/etc/kafka-exporter/certs/truststore.pem
      - --tls.cert-file=/etc/kafka-exporter/certs/kafka-exporter-cert.pem
      - --tls.key-file=/etc/kafka-exporter/certs/kafka-exporter-key.pem
      - --tls.insecure-skip-tls-verify
    volumes:
      - ./secrets/kafka-exporter/truststore.pem:/etc/kafka-exporter/certs/truststore.pem:ro
      - ./secrets/kafka-exporter/kafka-exporter-cert.pem:/etc/kafka-exporter/certs/kafka-exporter-cert.pem:ro
      - ./secrets/kafka-exporter/kafka-exporter-key.pem:/etc/kafka-exporter/certs/kafka-exporter-key.pem:ro
    healthcheck:
      test: 'bash -c ''printf "" > /dev/tcp/127.0.0.1/9308; exit $$?;'''
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - kafka
    healthcheck:
      test: curl --fail localhost:3000
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s

  kafka-connect-0:
    <<: *kafka-connect-common
    hostname: kafka-connect-0
    container_name: kafka-connect-0
    ports:
      - "8083:8083"

  kafka-connect-1:
    <<: *kafka-connect-common
    hostname: kafka-connect-1
    container_name: kafka-connect-1

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      kafka-source-0:
        condition: service_healthy
      kafka-source-1:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-source-0:9092,kafka-source-1:9092"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SSL
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/schema-registry/ssl/kafka.truststore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: test1234
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/schema-registry/ssl/kafka.schema-registry.keystore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: test1234
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: test1234
      SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets/schema-registry/kafka.schema-registry.keystore.jks:/etc/schema-registry/ssl/kafka.schema-registry.keystore.jks:ro
      - ./secrets/schema-registry/kafka.schema-registry.truststore.jks:/etc/schema-registry/ssl/kafka.truststore.jks:ro
    networks:
      - kafka
    healthcheck:
      test: curl --fail http://localhost:8081/subjects || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 15s

  kafka-producer:
    build:
      context: ./shop-api
      dockerfile: Dockerfile
    container_name: kafka-producer
    hostname: kafka-producer
    volumes:
      - ./secrets/shop-api/shop-api-cert.pem:/app/storage/certs/shop-api-cert.pem:ro
      - ./secrets/shop-api/shop-api-key.pem:/app/storage/certs/shop-api-key.pem:ro
      - ./secrets/shop-api/truststore.pem:/app/storage/certs/truststore.pem:ro
    networks:
      - kafka
    depends_on:
      - kafka-source-0
      - kafka-source-1
      - schema-registry

  banned-products:
    build:
      context: ./banned-products-system
      dockerfile: Dockerfile
    container_name: banned-products
    hostname: banned-products
    volumes:
      - ./secrets/shop-api/shop-api-cert.pem:/app/certs/shop-api-cert.pem:ro
      - ./secrets/shop-api/shop-api-key.pem:/app/certs/shop-api-key.pem:ro
      - ./secrets/shop-api/truststore.pem:/app/certs/truststore.pem:ro
    depends_on:
      kafka-source-0:
        condition: service_healthy
      kafka-source-1:
        condition: service_healthy
    command: list
    networks:
      - kafka

networks:
  kafka:
    name: kafka
    driver: bridge

volumes:
  kafka_0_data:
    name: kafka_0_data
    driver: local
  kafka_1_data:
    name: kafka_1_data
    driver: local
  kafka_2_data:
    name: kafka_2_data
    driver: local
  kafka_3_data:
    name: kafka_3_data
    driver: local
  prom_data:
    name: prom_data
    driver: local
  alertmanager_data:
    name: alertmanager_data
    driver: local
